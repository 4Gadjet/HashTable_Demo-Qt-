<h1>COCK</h1>
<body>
<title>Хеш-таблицы. Метод цепочек</title>
<p><a href="#top">Хеш-таблицы</a>
<br><a href="">Коллизия</a>
<br><a href="">Хорошие и плохие хеш-функции</a>
<br><a href="">Методы решения коллизий</a>


 
 <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><p><a name="top"></a></p> С точки зрения программиста, хеш-функция — это некий алгоритм, который переводит строку произвольной длины в строку фиксированной длины (массив из бит или байт). Если есть файл размером несколько мегабайт или в гигабайт, то с помощью хеш-функции можно получить строчку определённого размера (например, 64 бита, 128 бит, 256 бит и т.д.). Этот процесс называется хешированием. Причём к функции хеширования, которую используют в программировании, предъявляется два требования:
<pre></pre>1. Быстрота вычисления функции — операции при работе с хеш-функциями должны выполняться быстро.<pre></pre>2. Минимум коллизий – для сокращения шагов перебора элементов внутри одного ключа.
 <br><br>При всем этом, требований к занимаемой памяти не предъявляется, поэтому использовать хеш-функции выгодно при необходимости быстрого доступа к элементам в ущерб памяти.
<br>Хеш-функцией на множестве К возможных ключей называется функция h, которая отображает К в некоторый целочисленный интервал [a, b].
<br>Предположим, что имеется задача в сохранении какого-либо соотношения двух значений, которые представляют пару «ключ-строка». Данные соотношения исчисляются сотнями тысяч пар. Записывать в привычные нам структуры данных (массивы) невыгодно, поскольку на поиск необходимого нам элемента будет уходить колоссальное количество времени. Поэтому необходимо разместить их в оперативной памяти компьютера так, чтобы потом иметь возможность быстро находить значение по ключу. Ключ позволяют найти получить доступ к ячейке, на которую он указывает. В этой ячейке хранится односвязный или двусвязный список, который содержит в себе пару «ключ-значение». Если этот список пустой, то туда просто помещается новая пара «ключ-значение». Если список непустой, тогда проходим по всему списку и проверяем, нет ли совпадений по какому-то ключу. Если нет, то добавляем новый элемент; если есть, тогда заменяем элемент. По такому принципу работают хеш-таблицы.
</body>

